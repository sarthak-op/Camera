{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "source": [
    "import cv2\r\n",
    "import os"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "source": [
    "def detectFace(net,frame,confidence_threshold=0.7):\r\n",
    "    frameOpencvDNN=frame.copy()\r\n",
    "    print(frameOpencvDNN.shape)\r\n",
    "    frameHeight=frameOpencvDNN.shape[0]\r\n",
    "    frameWidth=frameOpencvDNN.shape[1]\r\n",
    "    blob=cv2.dnn.blobFromImage(frameOpencvDNN,1.0,(227,227),[124.96,115.97,106.13],swapRB=True,crop=False)\r\n",
    "    net.setInput(blob)\r\n",
    "    detections=net.forward()\r\n",
    "    faceBoxes=[]\r\n",
    "    for i in range(detections.shape[2]):\r\n",
    "        confidence=detections[0,0,i,2]\r\n",
    "        if confidence>confidence_threshold:\r\n",
    "            x1=int(detections[0,0,i,3]*frameWidth)\r\n",
    "            y1=int(detections[0,0,i,4]*frameHeight)\r\n",
    "            x2=int(detections[0,0,i,5]*frameWidth)\r\n",
    "            y2=int(detections[0,0,i,6]*frameHeight)\r\n",
    "            faceBoxes.append([x1,y1,x2,y2])\r\n",
    "            cv2.rectangle(frameOpencvDNN,(x1,y1),(x2,y2),(0,255,0),int(round(frameHeight/150)),8)\r\n",
    "    return frameOpencvDNN,faceBoxes\r\n",
    "        \r\n",
    "    \r\n",
    "faceProto='opencv_face_detector.pbtxt'\r\n",
    "faceModel='opencv_face_detector_uint8.pb'\r\n",
    "ageProto='age_deploy.prototxt'\r\n",
    "ageModel='age_net.caffemodel'\r\n",
    "genderProto='gender_deploy.prototxt'\r\n",
    "genderModel='gender_net.caffemodel'\r\n",
    "\r\n",
    "genderList=['Male','Female']\r\n",
    "ageList=['(0-2)','(4-6)','(8-12)','(15-20)','(25-32)','(38-43)','(48-53)','(60-100)']\r\n",
    "\r\n",
    "faceNet=cv2.dnn.readNet(faceModel,faceProto)\r\n",
    "ageNet=cv2.dnn.readNet(ageModel,ageProto)\r\n",
    "genderNet=cv2.dnn.readNet(genderModel,genderProto)\r\n",
    "\r\n",
    "video=cv2.VideoCapture(0)\r\n",
    "padding=20\r\n",
    "while cv2.waitKey(1)<0:\r\n",
    "    hasFrame,frame=video.read()\r\n",
    "    if not hasFrame:\r\n",
    "        cv2.waitKey()\r\n",
    "        break\r\n",
    "        \r\n",
    "    resultImg,faceBoxes=detectFace(faceNet,frame)\r\n",
    "    \r\n",
    "    if not faceBoxes:\r\n",
    "        print(\"No face detected\")\r\n",
    "    \r\n",
    "    for faceBox in faceBoxes:\r\n",
    "        face=frame[max(0,faceBox[1]-padding):min(faceBox[3]+padding,frame.shape[0]-1),max(0,faceBox[0]-padding):min(faceBox[2]+padding, frame.shape[1]-1)]\r\n",
    "        blob=cv2.dnn.blobFromImage(face,1.0,(227,227),[124.96,115.97,106.13],swapRB=True,crop=False)\r\n",
    "        genderNet.setInput(blob)\r\n",
    "        genderPreds=genderNet.forward()\r\n",
    "        gender=genderList[genderPreds[0].argmax()]\r\n",
    "        \r\n",
    "        ageNet.setInput(blob)\r\n",
    "        agePreds=ageNet.forward()\r\n",
    "        age=ageList[agePreds[0].argmax()]\r\n",
    "        cv2.putText(resultImg,f'{gender},{age}',(faceBox[0],faceBox[1]-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,(0,255,255),2,cv2.LINE_AA)\r\n",
    "        cv2.imshow(\"Detecting age and Gender\",resultImg)\r\n",
    "        \r\n",
    "        \r\n",
    "        if cv2.waitKey(33) & 0xFF == ord('q'):\r\n",
    "            break\r\n",
    "            \r\n",
    "cv2.destroyAllWindows()"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "No face detected\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n",
      "(480, 640, 3)\n"
     ]
    },
    {
     "output_type": "error",
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8688/3861705918.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     55\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     56\u001b[0m         \u001b[0mageNet\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msetInput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mblob\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 57\u001b[1;33m         \u001b[0magePreds\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mageNet\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     58\u001b[0m         \u001b[0mage\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mageList\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0magePreds\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     59\u001b[0m         \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mputText\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresultImg\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34mf'{gender},{age}'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfaceBox\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mfaceBox\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mFONT_HERSHEY_SIMPLEX\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0.8\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m255\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m255\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mLINE_AA\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "metadata": {}
  }
 ],
 "metadata": {
  "orig_nbformat": 4,
  "language_info": {
   "name": "python",
   "version": "3.9.7",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.9.7 64-bit"
  },
  "interpreter": {
   "hash": "8923e23cb33f20082970cb099aa18d929d056343e47ff70576c41e777b931489"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}